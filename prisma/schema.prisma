// This is your Prisma schema file for OBS Telegram Bot
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model TelegramUser {
  id           Int      @id @default(autoincrement())
  telegramId   BigInt   @unique
  username     String?
  firstName    String?
  lastName     String?
  isBot        Boolean  @default(false)
  isAdmin      Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  commandHistories CommandHistory[]
  streamSessions   StreamSession[]
  
  @@map("telegram_users")
}

model BotConfiguration {
  id                   Int      @id @default(autoincrement())
  bot_token            String   @unique
  bot_username         String?
  webhook_url          String?
  is_webhook_enabled   Boolean  @default(false)
  welcome_message      String   @default("Welcome to OBS Control Bot! Use /help to see available commands.")
  admin_only_commands  Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  @@map("bot_configurations")
}

model OBSConnection {
  id                   Int      @id @default(autoincrement())
  name                 String
  host                 String   @default("localhost")
  port                 Int      @default(4455)
  password             String?
  is_connected         Boolean  @default(false)
  last_connected_at    DateTime?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  // Relations
  scenes               Scene[]
  sources              Source[]
  stream_sessions       StreamSession[]
  
  @@map("obs_connections")
}

model Scene {
  id                   Int      @id @default(autoincrement())
  name                 String
  scene_id             String?
  obs_connection_id    Int
  is_active            Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  // Relations
  obs_connection        OBSConnection @relation(fields: [obs_connection_id], references: [id], onDelete: Cascade)
  sources               Source[]
  
  @@unique([name, obs_connection_id])
  @@map("scenes")
}

model Source {
  id                   Int      @id @default(autoincrement())
  name                 String
  source_id            String?
  source_type          String?
  scene_id             Int?
  obs_connection_id    Int
  is_visible           Boolean  @default(true)
  is_enabled           Boolean  @default(true)
  muted                Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  // Relations
  obs_connection        OBSConnection @relation(fields: [obs_connection_id], references: [id], onDelete: Cascade)
  scene                Scene?        @relation(fields: [scene_id], references: [id], onDelete: SetNull)
  
  @@unique([name, obs_connection_id])
  @@map("sources")
}

model CommandHistory {
  id                   Int      @id @default(autoincrement())
  command              String
  parameters           String?
  response             String?
  status               String   @default("pending") // pending, success, error
  telegram_user_id     Int?
  execution_time       Int?     // in milliseconds
  created_at           DateTime @default(now())
  
  // Relations
  telegram_user        TelegramUser? @relation(fields: [telegram_user_id], references: [id], onDelete: SetNull)
  
  @@map("command_histories")
}

model StreamSession {
  id                   Int      @id @default(autoincrement())
  stream_key           String?
  stream_url           String?
  is_streaming         Boolean  @default(false)
  started_at           DateTime?
  ended_at             DateTime?
  duration             Int?     // in seconds
  telegram_user_id     Int?
  obs_connection_id    Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  // Relations
  telegram_user        TelegramUser? @relation(fields: [telegram_user_id], references: [id], onDelete: SetNull)
  obs_connection        OBSConnection @relation(fields: [obs_connection_id], references: [id], onDelete: Cascade)
  
  @@map("stream_sessions")
}

model ApplicationLog {
  id                   Int      @id @default(autoincrement())
  level                String   @default("INFO") // DEBUG, INFO, WARN, ERROR
  component            String   // BOT, OBS, DATABASE, API, SYSTEM
  message              String
  details              String?  // JSON string for additional details
  userId               Int?     // Optional user association
  sessionId            String?  // Optional session tracking
  createdAt            DateTime @default(now())
  
  // Indexes for better performance
  @@index([level])
  @@index([component])
  @@index([createdAt])
  @@index([userId])
  
  @@map("application_logs")
}